#
# CUSTOM SCALAR
#
scalar DateTime

#
# ENUM
#
enum Gender {
  MALE
  FEMALE
}

enum LikeStatus {
  PENDING
  MATCHED
  SKIPPED
}

#
# NODE
#
type Me {
  id: ID!
  gender: Gender!
  nickName: String!
  age: Int!
  livingPref: String!
  photoPaths: [String!]!
  photoUrls: [String!]!
}

type User {
  id: ID!
  gender: Gender!
  nickName: String!
  age: Int!
  livingPref: String!
  photoUrls: [String!]!
  topPhotoUrl: String
}

type Message {
  id: ID!
  user: User!
  mine: Boolean!
  content: String!
  createdAt: DateTime!
}

type MessageRoom {
  id: ID!
  partner: User!
  messages(input: PageInput!): MessageConnection!
  latestMessage: Message!
}

#
# QUERY
#
type PageInfo {
  endCursor: DateTime
  hasNextPage: Boolean
}

input PageInput {
  first: Int!
  after: DateTime
}

type UserEdge {
  node: User!
  cursor: DateTime!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type MessageRoomEdge {
  node: MessageRoom!
  cursor: DateTime!
}

type MessageRoomConnection {
  edges: [MessageRoomEdge!]!
  pageInfo: PageInfo!
}

type MessageEdge {
  node: Message!
  cursor: DateTime!
}

type MessageConnection {
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
}

type Viewer {
  uid: ID!

  me: Me!
  user(userId: ID!): User!
  users(input: PageInput!): UserConnection!
  receiveLikeUsers: [User!]!
  sendLikeUsers(input: PageInput!): UserConnection!

  newMessageRooms(input: PageInput!): MessageRoomConnection!
  openedMessageRooms(input: PageInput!): MessageRoomConnection!
  messageRoom(messageRoomId: ID!): MessageRoom!
  message(messageId: ID!): Message!
}

type Query {
  viewer: Viewer!
}

#
# MUTATION
#
input SignUpInput {
  email: String!
  password: String!
}

input UpdateUserProfileInput {
  gender: Gender!
  nickName: String!
  age: Int!
  livingPref: String!
  photoPaths: [String!]!
}

input CreateMessageInput {
  messageRoomId: ID!
  content: String!
}

type Mutation {
  signUp(input: SignUpInput!): Me!
  updateUserProfile(input: UpdateUserProfileInput!): Me!
  updateUserLastAccess: Me!

  createLike(userId: ID!): User!
  cancelLike(userId: ID!): User!
  skipLike(userId: ID!): User!
  matchLike(userId: ID!): User!

  createMessage(input: CreateMessageInput!): Message!
}
