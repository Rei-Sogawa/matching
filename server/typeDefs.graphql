#
# CUSTOM SCALAR
#
scalar DateTime

#
# ENUM
#
enum Gender {
  MALE
  FEMALE
}

enum LikeStatus {
  PENDING
  MATCHED
  SKIPPED
}

#
# NODE
#
type Me {
  id: ID!
  gender: Gender!
  nickName: String!
  age: Int!
  livingPref: String!
  photoPaths: [String!]!
  photoUrls: [String!]!
}

type User {
  id: ID!
  gender: Gender!
  nickName: String!
  age: Int!
  livingPref: String!
  photoUrls: [String!]!
}

#
# QUERY
#
type UsersPageInfo {
  endCursor: DateTime
  hasNextPage: Boolean
}

input UsersInput {
  first: Int!
  after: DateTime
}

type UserEdge {
  node: User!
  cursor: DateTime!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: UsersPageInfo!
}

type Query {
  me: Me!
  user(id: ID!): User!
  users(input: UsersInput!): UserConnection!
  receiveLikeUsers: [User!]!
  sendLikeUsers(input: UsersInput!): UserConnection!
}

#
# MUTATION
#
input SignUpInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  gender: Gender!
  nickName: String!
  age: Int!
  livingPref: String!
  photoPaths: [String!]!
}

type Mutation {
  signUp(input: SignUpInput!): Me!
  access: Me!
  updateUser(input: UpdateUserInput!): Me!
  like(userId: ID!): User!
  unlike(userId: ID!): User!
}
